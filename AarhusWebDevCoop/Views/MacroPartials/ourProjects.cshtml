@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using Umbraco.Core.Models
@using Umbraco.Web

@*
    This snippet shows how simple it is to fetch only children of a certain Document Type.

    Be sure to change "IPublishedContent" below to match your needs, such as "TextPage" or "NewsItem".
    (You can find the alias of your Document Type by editing it in the Settings section)
*@

@{
    /**/

    var site = Model.Content.Site();
    //var selection = site.Children.Where(x => x.DocumentTypeAlias == "projectsOverview").First().Children.ToArray();
    // var selection = site.Children.Where(x => x.IsVisible()).ToArray();

    var selection = site.Children
    .Where(x => x.IsVisible())
    .Where(x => x.DocumentTypeAlias == "projectsOverview")
    .First().Children.Where(x => x.HasValue("projectStatus") &&
    Umbraco.GetPreValueAsString(x.GetPropertyValue<int>("projectStatus")) == "Completed").ToArray();

}
@if (selection.Length > 0)
{
    <ul>
        @foreach (var menuItem in selection)
        {
            var isProtected = umbraco.library.IsProtected(menuItem.Id, menuItem.Path);
            var loginAccess = isProtected && umbraco.library.HasAccess(menuItem.Id, menuItem.Path);
            if (!isProtected || loginAccess)
            {
                <li class="@(menuItem.IsAncestorOrSelf(Model.Content) ? "active" : null)">
                    <a href="@menuItem.Url">@menuItem.Name</a>
                </li>
            }
            @*<li><a class="dropdown-item" href="@item.Url">@item.Name</a></li>*@
        }
    </ul>
}
